let error,success,express,ApolloServer,gql,GraphQLUpload,PORT,DB,resolvers,typeDefs,MongoClient;_115‍.w("consola",[["error",["error"],function(v){error=v}],["success",["success"],function(v){success=v}]]);_115‍.w("express",[["default",["express"],function(v){express=v}]]);_115‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_115‍.w("graphql-upload",[["GraphQLUpload",["GraphQLUpload"],function(v){GraphQLUpload=v}]]);_115‍.w("./config",[["PORT",["PORT"],function(v){PORT=v}],["DB",["DB"],function(v){DB=v}]]);_115‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_115‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_115‍.w("mongodb",[["MongoClient",["MongoClient"],function(v){MongoClient=v}]]);









let mongoClient = null;

const app = express();
app.use(express.static(join(__dirname, './uploads')));
app.use((req,res,next)=>{
    req.db = mongoClient.db('archi_graphql_api');
    next();
});
const server = new ApolloServer({
    typeDefs,
    resolvers,
    playground: false,
    context: ({
        req
    }) => {

        let {
            db,
        } = req;

        return {
            req,
            db,
        };
    }
})

const startApp = async () => { 
    try {
        MongoClient.connect(DB, {useNewUrlParser: true, useUnifiedTopology: true},function (err, client) {
            if(err) {
            console.log('Mongo connection error');
            } else {
                success({
                    badge: true,
                    message: `Successfully connected with the Database.`
                })
            mongoClient = client;
            }
        })
        await server.start();
        server.applyMiddleware({
            app
        })
        
        
        app.listen(PORT, () => success({
            badge: true,
            message: `Server started on PORT ${PORT}`
        }))

          
    } catch (err) {
        error({
            badge: true,
            message: err.message
        })
    }
    
}

startApp();
