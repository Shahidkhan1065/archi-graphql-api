let ObjectId,error,success,GraphQLUpload;_bdb‍.x([["default",()=>_bdb‍.o]]);_bdb‍.w("bson",[["ObjectId",["ObjectId"],function(v){ObjectId=v}]]);_bdb‍.w("consola",[["error",["error"],function(v){error=v}],["success",["success"],function(v){success=v}]]);_bdb‍.w("graphql-upload/public/GraphQLUpload",[["default",["GraphQLUpload"],function(v){GraphQLUpload=v}]]);




_bdb‍.d({
    Upload : GraphQLUpload,
    Query: {
        getAllBlogs: async (_,__, {db}) => {
            const blogs = await db.collection("blog").find().toArray();
            return blogs;
        },

        getBlogByID: async (_,{id}, {db}) => {
            const blog = await db.collection('blog').findOne({_id: ObjectId(id)});
            return blog;
        }
    },

    Mutation: {
        createNewBlog: async (_, {newBlog}, {db}, info) => {
            try {
                newBlog.createdAt = newBlog.updatedAt = new Date().toISOString();
                //newBlog.updatedAt = new Date().toISOString();
                const insertedBlogId = await db.collection("blog").insertOne(newBlog);
                const result = await db.collection('blog').findOne({_id: ObjectId(insertedBlogId.insertedId)})
                return {...result};    
            } catch (error) {
                error({
                    badge: true,
                    message: error.message
                })
            }
            
        },

        editBlogByID: async(_, {id, updatedBlog}, {db}) => {
            try {
                updatedBlog.updatedAt = new Date().toISOString();
                await db.collection("blog").updateOne({_id: ObjectId(id)},{ $set: updatedBlog}, {upsert: true, new: true});
                const result = await db.collection('blog').findOne({_id: ObjectId(id)})
                return result;    
            } catch (error) {
                error({
                    badge: true,
                    message: error.message
                })
            }
        },

        deleteBlogByID: async(_, {id}, {db}) => {
            try {
                let deletedBlog = await db.collection('blog').deleteMany({_id: ObjectId(id)});
                _bdb‍.g.console.log('deletedBlog::',deletedBlog);
                return {    
                    success: true,
                    id: id,
                    message: "Your blogs is deleted.",
                }
            } catch (error) {
                _bdb‍.g.console.log(error);
            }
        }
    }
});